# nginx conf
load_module modules/ngx_mail_module.so;
load_module modules/ndk_http_module.so; # required for set_misc_module
load_module modules/ngx_http_set_misc_module.so;
load_module modules/ngx_stream_module.so;

daemon off;
pid /nginx.pid;
# 'notice' adds boring stuff about nginx start/stop
error_log /data/logs/error.log warn;

worker_processes auto;
events { worker_connections 1024; }

http {
	include /etc/nginx/mime.types;
	access_log /data/logs/http.access.log.gz combined gzip;
	# 'info' logs noise about closed keepalive connections
	error_log /data/logs/http.log notice;
	log_not_found off;

	ssl_certificate     /data/cert/fullchain.pem;
	ssl_certificate_key /data/cert/privkey.pem;
	ssl_session_cache   shared:SSL:10m;
	ssl_session_timeout 1d;
	# see https://wiki.mozilla.org/Security/Server_Side_TLS
	# and https://ssl-config.mozilla.org/
	#ssl_protocols TLSv1.3;

	include servers[.]conf;

	server {
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         squirrelmail.shpakovsky.ru;
		access_log          /data/logs/squirrelmail.log.gz combined gzip;
		auth_basic          "huh?";
		auth_basic_user_file /data/passwd/mail.txt;
		location /         {
			proxy_pass http://127.0.0.1:8001;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_redirect http://$host:8000/ https://$host/;
			}
		client_max_body_size 1600m;
		# how long might it take to _send_ a message?
		proxy_read_timeout 5m;
	}

	server {
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         baikal.shpakovsky.ru;
		access_log          /data/logs/baikal.log.gz combined gzip;
		location /admin/   { return 403; }
		location /carddav  { return 301 /infcloud; }
		location /infcloud/ { root /data/secure/baikal.shpakovsky.ru; }
		location /.well-known/carddav { return 301 /dav.php; }
		location /.well-known/caldav  { return 301 /dav.php; }
		location /          {
			proxy_pass http://127.0.0.1:8002;
			proxy_set_header Host       $host;
			proxy_set_header X-Forwarded-Proto $scheme;
			}
	}

	server {
		listen              80;
		listen              [::]:80;
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         dyn.shpakovsky.ru;
		access_log          /data/logs/dyn.log.gz combined gzip;
		auth_basic          "DynDNS";
		auth_basic_user_file /data/passwd/dyndns.txt;
		location /          {
			proxy_pass http://127.0.0.1:8004;
			proxy_set_header X-Real-IP	$remote_addr;
			proxy_set_header X-Real-User	$remote_user;
			}
	}

	server {
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         opendkim-testmsg.shpakovsky.ru;
		root                /data/secure/opendkim-testmsg.shpakovsky.ru;
		location /cgi-bin/  {
			proxy_pass http://127.0.0.1:8005;
			access_log /data/logs/opendkim-testmsg.log.gz combined gzip;
			}
	}

	server {
		listen              80;
		listen              [::]:80;
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         calc.shpakovsky.ru;
		location = / {
			rewrite / /0p0.html permanent;
			}
		location ~ ^/([0-9]+)([pmtd])([0-9]+)\.html$ {
			proxy_pass http://127.0.0.1:8006/$1/$2/$3;
			gzip on;
			gzip_comp_level 3;
			}
		location /robots.txt {
			return 200 "User-agent: *\nDisallow:\nAllow: /";
			}
		access_log /data/logs/calc.log.gz combined gzip;
	}

	server {
		listen              80;
		listen              [::]:80;
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         dropbox.shpakovsky.ru;
		root                /data/secure/dropbox.shpakovsky.ru;
		location /cgi-bin/  {
			proxy_pass http://127.0.0.1:8007;
			client_max_body_size 10g;
			access_log /data/logs/dropbox.log.gz combined gzip;
			}
	}

	server {
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         ggstproxy.shpakovsky.ru;
		root                /data/secure/ggstproxy.shpakovsky.ru/data/html;
		auth_basic          "huh?";
		auth_basic_user_file /data/passwd/mail.txt;
		rewrite             ^/gemini/	/index.html;
		rewrite             ^/gopher/	/index.html;
		rewrite             ^/spartan/	/index.html;
		rewrite             ^/titan/	/index.html;
		location /robots.txt { return 200 "User-agent: *\nDisallow: /"; }
		location /cgi-bin/  {
			proxy_pass http://127.0.0.1:8008/cgi-bin/;
			proxy_set_header X-Real-IP $remote_addr;
			}
	}

	server {
		listen              80;
		listen              [::]:80;
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         backup3-demo.shpakovsky.ru;
		location /          {
			proxy_pass http://127.0.0.1:8009;
			gzip on;
			}
	}

	server {
		listen              80;
		listen              [::]:80;
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         ancha-times.shpakovsky.ru;
		root                /data/public/ancha-times.shpakovsky.ru;
		expires             modified +24h;
		gzip_static         on;
		location /robots.txt { return 200 'User-agent: *\nDisallow: /'; }
		# location / {
		# 	# allow only XHR requests
		# 	if ($http_origin) {
		# 		root /data/public/ancha-times.shpakovsky.ru;
		# 		add_header 'Access-Control-Allow-Origin' 'http://ancha-times.chat.ru';
		# 	}
		# }
		location /times.html {
			# allow only XHR requests from this origin
			if ($http_origin != 'http://ancha-times.chat.ru') {
				return 200 'http://ancha-times.chat.ru';
			}
			add_header 'Access-Control-Allow-Origin' 'http://ancha-times.chat.ru';
			# add_header 'Access-Control-Allow-Headers' 'x-auth';
		}
		location = / { return 301 'http://ancha-times.chat.ru'; }
		add_header X-Robots-Tag noindex;
	}

	server {
		listen              443 ssl http2;
		listen              [::]:443 ssl http2;
		server_name         mta-sts.shpakovsky.ru;
		access_log          /data/logs/mta-sts.log.gz combined gzip;
		location /.well-known/mta-sts.txt {
			return 200 "version: STSv1\nmode: testing\nmx: shpakovsky.ru\nmax_age: 86401";
			access_log off;
		}
	}

	server {
		listen              80 default_server;
		listen              [::]:80 default_server;
		listen              443 default_server ssl http2;
		listen              [::]:443 default_server ssl http2;
		# there's only noise there
		access_log          off;
		error_log           /dev/null emerg;
		location /robots.txt { return 200 "User-agent: *\nDisallow: /"; }
		location /         { return 404; }
	}

	# mail_auth servers
	log_format auth "$time_local $http_auth_protocol auth $http_auth_method [$http_auth_user] [$http_auth_pass] from $http_client_ip";
	log_format auth_ok "$time_local $http_auth_protocol auth $http_auth_method [$http_auth_user] [] from $http_client_ip";

        server {
		listen 127.0.0.1:2580;
		# simple server which accepts only unauthorised smtp connections
		# All login attempts and non-smtp protocols go to /fail
		if ($http_auth_method != "none")   { rewrite /auth /fail break; }
		if ($http_auth_protocol != "smtp") { rewrite /auth /fail break; }
		location = /auth {
			# requests not rewritten by any of the rules above
			# are successful and should be proxied to SMTP server
			add_header Auth-Status OK;
			add_header Auth-Server 127.0.0.1;  # backend ip
			add_header Auth-Port   2525;       # backend port
			access_log off;
			return 200;
		}
		location = /fail {
			# failed requests end up here
			add_header Auth-Status "try again with a different username and password";
			add_header Auth-Wait 3;
			access_log /data/logs/auth.log.gz auth gzip flush=5m;
			return 200;
		}
	}

        server {
		listen 127.0.0.1:14380;
		# 3-level server which checks against HTTP basic auth file
		access_log off;
		location /check    {
			# entry point - sets HTTP basic auth header and forwards to 2nd level
			proxy_pass        http://127.0.0.1:14380/auth;
			set $auth         "$http_auth_user:$http_auth_pass";
			set_encode_base64 $auth; # uses set_misc_module
			set $auth_header  "Basic $auth";
			proxy_set_header  Authorization $auth_header;
		}
		location /auth     {
			# 2nd level - performs HTTP basic auth check and forwards either to /pass or /fail
			# You can also consider using auth_request here, ref
			# https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/
			# https://nginx.org/en/docs/http/ngx_http_auth_request_module.html
			auth_basic "imap";
			auth_basic_user_file /data/passwd/mail.txt;
			proxy_pass http://127.0.0.1:14380/pass;
			error_page 401 =200 /fail;
		}
		location /pass     {
			# this sits behind HTTP basic auth. If request came here - it's authorised.
			add_header Auth-Status OK;
			add_header Auth-Server 127.0.0.1;  # backend ip
			add_header Auth-Port   1433;       # backend port
			access_log /data/logs/auth-pass.log auth_ok;
			return 200;
		}
		location = /fail   {
			# unauthourised requests end up here.
			add_header Auth-Status "try again with a different username and password";
			add_header Auth-Wait 3;
			access_log /data/logs/auth.log.gz auth gzip flush=5m;
			return 200;
		}

	}
}

mail {
	server_name shpakovsky.ru;
	auth_http 127.0.0.1:2580/auth;
	smtp_auth none;
	smtp_capabilities "PIPELINING" "SIZE 1024024024" "ENHANCEDSTATUSCODES" "8BITMIME" "SMTPUTF8" "CHUNKING";
	imap_capabilities "IMAP4rev1" "ID" "ENABLE" "IDLE" "LITERAL+";
	proxy_pass_error_message on;

	# 'info' adds lots of stuff about failed login attempts
	error_log /data/logs/mail.log notice;

	starttls on;
	ssl_certificate     /data/cert/fullchain.pem;
	ssl_certificate_key /data/cert/privkey.pem;

	server {
		listen     25;
		listen     587;
		listen     465 ssl;
		listen     [::]:25;
		listen     [::]:587;
		listen     [::]:465 ssl;
		protocol   smtp;
		proxy      on;
	}

	server {
		listen     110;
		listen     995 ssl;
		listen     [::]:110;
		listen     [::]:995 ssl;
		protocol   pop3;
	}

	server {
		listen     143;
		listen     993 ssl;
		listen     [::]:143;
		listen     [::]:993 ssl;
		protocol   imap;
		auth_http  127.0.0.1:14380/check;
		proxy_protocol on;
	}
}

stream {
	# gemini proxy
	server {
		listen              1964;
		listen              1965 ssl;
		listen              [::]:1964;
		listen              [::]:1965 ssl;
		proxy_pass          127.0.0.1:1966;
		proxy_protocol      on;
		ssl_certificate     /data/cert/gemini.cert;
		ssl_certificate_key /data/cert/gemini.key;
		ssl_password_file   /data/cert/gemini.pass;
	}
}
